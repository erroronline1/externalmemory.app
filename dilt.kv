#:kivy 2.0.0

<Screen>:
	canvas:
		Color:
			rgba: (.18, .20, .25, 1)
		Rectangle:
			size: self.size


	camimage: camimage
	detectedcode: detectedcode
	mynotes: mynotes
	good: good
	meh: meh
	bad: bad

	mydata: mydata

	fullscreen: True
	Carousel:
		GridLayout:
			cols:1
			size_hint: (.9, 1)
			pos_hint: {'center': (.5, .5)}
			spacing: [0, 5]
			Image:
				source: "icon.png"
				size_hint: (1, None)
				height: 48
			Image:
				id: camimage
				size_hint: (2, 2)
				allow_stretch: True
				keep_ratio: True
			Label:
				id: detectedcode
				text: root.content("diltDetectedcode")
				size_hint: (1, None)
				height: 32
			Label:
				text: root.content("diltMynotes")
				size_hint: (1, None)
				height: 32
			TextInput:
				id: mynotes
			GridLayout:
				cols: 3
				spacing: [5, 0]
				size_hint: (1, .5)
				ToggleButton:
					id: good
					group: "rating"
					text: root.content("diltGood")
				ToggleButton:
					id: meh
					group: "rating"
					text: root.content("diltMeh")
				ToggleButton:
					id: bad
					group: "rating"
					text: root.content("diltBad")
			Button:
				text: root.content("diltSave")
				on_release: root.savefn()
		GridLayout:
			cols:1
			size_hint: (.9, 1)
			pos_hint: {'center': (.5, .5)}
			spacing: [0, 5]
			Label:
				text: root.content("mydataTitle")
				size_hint: (1, None)
				height: 48
				markup: True
			ScrollView:
				Label:
					id: mydata
					size_hint_y: None
					text_size: self.width, None
					height: self.texture_size[1]
					text: root.content("mydata", mydata= True)
			Button:
				text: root.content("mydataClear")
				on_release: root.clearData()
			Button:
				text: root.content("mydataPush")
			Button:
				text: root.content("mydataRestore")
		GridLayout:
			cols:1
			size_hint: (.9, 1)
			pos_hint: {'center': (.5, .5)}
			spacing: [0, 5]
			Label:
				text: root.content("aboutSettings")
				size_hint: (1, None)
				height: 48
				markup: True
			GridLayout:
				cols:2
				spacing: [0, 5]
				Label:
					text:root.content("aboutLanguage")
					size_hint: (1, None)
					height: 48
				Spinner:
					pos_hint: {'center': (.5, .5)}
					text: app.languageSettings('setting')
					values: app.languageSettings('list')
					on_text: app.languageSettings(self.text)
				Label:
					text:root.content("aboutCam")
					size_hint: (1, None)
					height: 48
				Spinner:
					pos_hint: {'center': (.5, .5)}
					text: app.camSettings('setting')
					values: app.camSettings('list')
					on_text: app.camSettings(self.text)
			Label:
				text: root.content("aboutSettingsApply")
				size_hint: (1, None)
				height: 16
				markup: True
			Label:
				text: root.content("aboutTitle")
				size_hint: (1, None)
				height: 48
				markup: True
			ScrollView:
				size_hint: (1, 3)
				Label:
					text: root.content("aboutText")
					size_hint_y: None
					text_size: self.width, None
					height: self.texture_size[1]
					markup: True

<-Button, -ToggleButton, -Spinner, -SpinnerOption>
	canvas.before:
		# border
		Color:
			rgba: (.30, .34, .42, 1) if self.state=='normal' else (.56, .74, .73, 1)  # visual feedback of press
		RoundedRectangle:
			pos: self.pos
			size: self.size[0] - 1, self.size[1] - 1
			radius: [5,]
		# contentbox
		#Color:
		#	rgba: (.30, .34, .42, 1) if self.state=='normal' else (.56, .74, .73, 1)  # visual feedback of press
		#RoundedRectangle:
		#	pos: self.pos[0]+1,self.pos[1]+1
		#	size: self.size[0] - 3, self.size[1] - 3
		#	radius: [4,]
		# text? unsure about the necessity of recangle
		Color:
			rgba: (.93, .94, .96, 1)
		Rectangle:
			texture: self.texture
			size: self.texture_size
			pos: int(self.center_x - self.texture_size[0] / 2.), int(self.center_y - self.texture_size[1] / 2.)
	size_hint: (1, None)
	height: 48

<-TextInput>
	canvas.before:
		# border settings
		Color:
			rgba: (.90, .91, .94, 1)
		RoundedRectangle:
			pos: self.pos
			size: self.size
			radius: [5,]
		#contentbox settings
		Color:
			rgba: (1,1,1,0)
		Rectangle:
			size: (self.width - self.border[1] - self.border[3], self.height - self.border[0] - self.border[2])
			pos: (self.x + self.border[3], self.y + self.border[0])
		# text color
		Color:
			rgba: (.18, .20, .25, 1)

<-Popup>:
	GridLayout:
		cols: 1
		padding: '12dp'
		pos_hint: {'center': (0.5, 0.5)}
		size_hint_x: 0.66
		size_hint_y: None
		height: self.minimum_height
		canvas:
			#background color
			Color:
				rgba: (.18, .20, .25, .8)
			Rectangle:
				size: root._window.size if root._window else (0, 0)
			Color:
				rgba: (.93, .94, .96, 1)
		Label:
			text: root.text
			size_hint_y: None
			height: self.texture_size[1] + dp(16)
			text_size: self.width - dp(16), None
			halign: 'center'
		BoxLayout:
			size_hint_y: None
			height: sp(48)
			Button:
				text: root.cancel_text
				on_press: root.cancel()
			Button:
				text: root.ok_text
				on_press: root.ok()

